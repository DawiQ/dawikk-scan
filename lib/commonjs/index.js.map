{"version":3,"names":["_reactNative","require","_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","DEFAULT_CONFIG","throttling","analysisInterval","messageInterval","events","emitMessage","emitAnalysis","emitBestMove","LINKING_ERROR","Platform","select","ios","default","ScanModule","NativeModules","RNScanModule","Proxy","get","Error","ScanEventEmitter","exports","NativeEventEmitter","Scan","constructor","config","engineInitialized","listeners","analysisListeners","bestMoveListeners","init","bind","sendCommand","shutdown","addMessageListener","addAnalysisListener","addBestMoveListener","removeMessageListener","removeAnalysisListener","removeBestMoveListener","handleOutput","handleAnalysisOutput","emitThrottledMessages","emitThrottledAnalysis","setConfig","outputSubscription","addListener","analysisSubscription","initEngine","error","console","command","messageThrottleTimer","clearTimeout","analysisThrottleTimer","shutdownEngine","messageBuffer","length","latestMessage","forEach","listener","setTimeout","analysisBuffer","latestAnalysis","message","push","data","type","lastBestMove","index","indexOf","splice","analyzePosition","position","options","depth","movetime","nodes","infinite","levelCommand","stopAnalysis","getComputerMove","destroy","catch","remove","_default"],"sources":["index.tsx"],"sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\n\n// Type definitions for draughts/checkers\nexport interface AnalysisOptions {\n  depth?: number;\n  movetime?: number;\n  nodes?: number;\n  infinite?: boolean;\n}\n\nexport interface AnalysisData {\n  type: 'info' | 'bestmove';\n  depth?: number;\n  score?: number;\n  bestMove?: string;\n  line?: string;\n  move?: string;\n  nodes?: number;\n  time?: number;\n  nps?: number;\n  fen?: string;\n  [key: string]: any;\n}\n\nexport interface BestMoveData {\n  type: 'bestmove';\n  move: string;\n  ponder?: string;\n}\n\n// Configuration for event throttling and filtering\nexport interface ScanConfig {\n  // Throttling intervals (in ms)\n  throttling: {\n    analysisInterval: number;  // Time between analysis event emissions\n    messageInterval: number;   // Time between message event emissions\n  };\n  // Event emission control\n  events: {\n    emitMessage: boolean;      // Whether to emit raw message events\n    emitAnalysis: boolean;     // Whether to emit analysis events\n    emitBestMove: boolean;     // Whether to emit bestMove events\n  };\n}\n\ntype MessageListener = (message: string) => void;\ntype AnalysisListener = (data: AnalysisData) => void;\ntype BestMoveListener = (data: BestMoveData) => void;\n\n// Default configuration\nconst DEFAULT_CONFIG: ScanConfig = {\n  throttling: {\n    analysisInterval: 100,   // Default: 100ms between analysis events\n    messageInterval: 100,    // Default: 100ms between message events\n  },\n  events: {\n    emitMessage: true,\n    emitAnalysis: true,\n    emitBestMove: true,\n  }\n};\n\n// Linking error handling\nconst LINKING_ERROR =\n  `The package 'dawikk-scan' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo Go\\n';\n\n// Get the native module\nconst ScanModule = NativeModules.RNScanModule\n  ? NativeModules.RNScanModule\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\n// Create event emitter\nexport const ScanEventEmitter = new NativeEventEmitter(ScanModule);\n\nclass Scan {\n  // Class properties\n  engineInitialized: boolean;\n  private listeners: MessageListener[];\n  private analysisListeners: AnalysisListener[];\n  private bestMoveListeners: BestMoveListener[];\n  private outputSubscription: any;\n  private analysisSubscription: any;\n  \n  // Throttling properties\n  private config: ScanConfig;\n  private messageBuffer: string[] = [];\n  private analysisBuffer: AnalysisData[] = [];\n  private lastBestMove: BestMoveData | null = null;\n  private messageThrottleTimer: ReturnType<typeof setTimeout> | null = null;\n  private analysisThrottleTimer: ReturnType<typeof setTimeout> | null = null;\n  \n  constructor(config?: Partial<ScanConfig>) {\n    this.engineInitialized = false;\n    this.listeners = [];\n    this.analysisListeners = [];\n    this.bestMoveListeners = [];\n    \n    // Merge provided config with defaults\n    this.config = {\n      ...DEFAULT_CONFIG,\n      throttling: {\n        ...DEFAULT_CONFIG.throttling,\n        ...(config?.throttling || {})\n      },\n      events: {\n        ...DEFAULT_CONFIG.events,\n        ...(config?.events || {})\n      }\n    };\n    \n    // Bind methods\n    this.init = this.init.bind(this);\n    this.sendCommand = this.sendCommand.bind(this);\n    this.shutdown = this.shutdown.bind(this);\n    this.addMessageListener = this.addMessageListener.bind(this);\n    this.addAnalysisListener = this.addAnalysisListener.bind(this);\n    this.addBestMoveListener = this.addBestMoveListener.bind(this);\n    this.removeMessageListener = this.removeMessageListener.bind(this);\n    this.removeAnalysisListener = this.removeAnalysisListener.bind(this);\n    this.removeBestMoveListener = this.removeBestMoveListener.bind(this);\n    this.handleOutput = this.handleOutput.bind(this);\n    this.handleAnalysisOutput = this.handleAnalysisOutput.bind(this);\n    this.emitThrottledMessages = this.emitThrottledMessages.bind(this);\n    this.emitThrottledAnalysis = this.emitThrottledAnalysis.bind(this);\n    this.setConfig = this.setConfig.bind(this);\n    \n    // Set up event subscriptions\n    this.outputSubscription = ScanEventEmitter.addListener(\n      'scan-output',\n      this.handleOutput\n    );\n    \n    this.analysisSubscription = ScanEventEmitter.addListener(\n      'scan-analyzed-output',\n      this.handleAnalysisOutput\n    );\n  }\n  \n  /**\n   * Updates the Scan configuration.\n   * @param config Partial configuration to update\n   */\n  setConfig(config: Partial<ScanConfig>): void {\n    this.config = {\n      ...this.config,\n      throttling: {\n        ...this.config.throttling,\n        ...(config.throttling || {})\n      },\n      events: {\n        ...this.config.events,\n        ...(config.events || {})\n      }\n    };\n  }\n  \n  /**\n   * Initializes the Scan engine.\n   * @returns Promise resolved as true if initialization succeeded.\n   */\n  async init(): Promise<boolean> {\n    if (this.engineInitialized) {\n      return true;\n    }\n    \n    try {\n      await ScanModule.initEngine();\n      this.engineInitialized = true;\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize Scan engine:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Sends a HUB command to the Scan engine.\n   * @param command HUB command to send.\n   * @returns Promise resolved as true if the command was sent.\n   */\n  async sendCommand(command: string): Promise<boolean> {\n    if (!this.engineInitialized) {\n      await this.init();\n    }\n    \n    try {\n      return await ScanModule.sendCommand(command);\n    } catch (error) {\n      console.error('Failed to send command to Scan:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Shuts down the Scan engine.\n   * @returns Promise resolved as true if shutdown succeeded.\n   */\n  async shutdown(): Promise<boolean> {\n    if (!this.engineInitialized) {\n      return true;\n    }\n    \n    // Clear any pending throttle timers\n    if (this.messageThrottleTimer) {\n      clearTimeout(this.messageThrottleTimer);\n      this.messageThrottleTimer = null;\n    }\n    \n    if (this.analysisThrottleTimer) {\n      clearTimeout(this.analysisThrottleTimer);\n      this.analysisThrottleTimer = null;\n    }\n    \n    try {\n      await ScanModule.shutdownEngine();\n      this.engineInitialized = false;\n      return true;\n    } catch (error) {\n      console.error('Failed to shutdown Scan engine:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Emits throttled message events based on configuration.\n   */\n  private emitThrottledMessages(): void {\n    if (this.messageBuffer.length === 0 || !this.config.events.emitMessage) {\n      this.messageThrottleTimer = null;\n      return;\n    }\n    \n    // Only emit the latest message\n    const latestMessage = this.messageBuffer[this.messageBuffer.length - 1];\n    this.listeners.forEach(listener => listener(latestMessage));\n    \n    // Clear buffer after emitting\n    this.messageBuffer = [];\n    \n    // Schedule next emission if needed\n    this.messageThrottleTimer = setTimeout(\n      this.emitThrottledMessages,\n      this.config.throttling.messageInterval\n    );\n  }\n  \n  /**\n   * Emits throttled analysis events based on configuration.\n   */\n  private emitThrottledAnalysis(): void {\n    if (this.analysisBuffer.length === 0 || !this.config.events.emitAnalysis) {\n      this.analysisThrottleTimer = null;\n      return;\n    }\n    \n    // Emit the latest analysis data\n    const latestAnalysis = this.analysisBuffer[this.analysisBuffer.length - 1];\n    this.analysisListeners.forEach(listener => listener(latestAnalysis));\n    \n    // Clear buffer after emitting\n    this.analysisBuffer = [];\n    \n    // Schedule next emission if needed\n    this.analysisThrottleTimer = setTimeout(\n      this.emitThrottledAnalysis,\n      this.config.throttling.analysisInterval\n    );\n  }\n  \n  /**\n   * Handles output messages from the engine.\n   * @param message Message from the Scan engine.\n   */\n  handleOutput(message: string): void {\n    if (!this.config.events.emitMessage) return;\n    \n    // Add message to buffer\n    this.messageBuffer.push(message);\n    \n    // Start throttle timer if not running\n    if (this.messageThrottleTimer === null) {\n      this.messageThrottleTimer = setTimeout(\n        this.emitThrottledMessages,\n        this.config.throttling.messageInterval\n      );\n    }\n  }\n  \n  /**\n   * Handles analyzed output data from the engine.\n   * @param data Analyzed data from the Scan engine.\n   */\n  handleAnalysisOutput(data: AnalysisData | BestMoveData): void {\n    if (data.type === 'bestmove') {\n      // Store latest bestmove\n      this.lastBestMove = data as BestMoveData;\n      \n      // Immediately emit bestMove events if configured\n      if (this.config.events.emitBestMove) {\n        this.bestMoveListeners.forEach(listener => \n          listener(data as BestMoveData));\n      }\n      \n      // Clear analysis buffer when bestmove arrives\n      this.analysisBuffer = [];\n      \n      // Cancel any pending analysis emissions\n      if (this.analysisThrottleTimer) {\n        clearTimeout(this.analysisThrottleTimer);\n        this.analysisThrottleTimer = null;\n      }\n    } else if (data.type === 'info') {\n      // Update analysis buffer with latest data\n      this.analysisBuffer.push(data as AnalysisData);\n      \n      // Start throttle timer if not running\n      if (this.analysisThrottleTimer === null) {\n        this.analysisThrottleTimer = setTimeout(\n          this.emitThrottledAnalysis,\n          this.config.throttling.analysisInterval\n        );\n      }\n    }\n  }\n  \n  /**\n   * Adds a message listener.\n   * @param listener Function to call for each message.\n   * @returns Function to remove the listener.\n   */\n  addMessageListener(listener: MessageListener): () => void {\n    this.listeners.push(listener);\n    return () => this.removeMessageListener(listener);\n  }\n  \n  /**\n   * Adds an analysis listener.\n   * @param listener Function to call for each analysis result.\n   * @returns Function to remove the listener.\n   */\n  addAnalysisListener(listener: AnalysisListener): () => void {\n    this.analysisListeners.push(listener);\n    return () => this.removeAnalysisListener(listener);\n  }\n  \n  /**\n   * Adds a bestmove listener.\n   * @param listener Function to call for each bestmove.\n   * @returns Function to remove the listener.\n   */\n  addBestMoveListener(listener: BestMoveListener): () => void {\n    this.bestMoveListeners.push(listener);\n    return () => this.removeBestMoveListener(listener);\n  }\n  \n  /**\n   * Removes a message listener.\n   * @param listener Listener to remove.\n   */\n  removeMessageListener(listener: MessageListener): void {\n    const index = this.listeners.indexOf(listener);\n    if (index !== -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n  \n  /**\n   * Removes an analysis listener.\n   * @param listener Listener to remove.\n   */\n  removeAnalysisListener(listener: AnalysisListener): void {\n    const index = this.analysisListeners.indexOf(listener);\n    if (index !== -1) {\n      this.analysisListeners.splice(index, 1);\n    }\n  }\n  \n  /**\n   * Removes a bestmove listener.\n   * @param listener Listener to remove.\n   */\n  removeBestMoveListener(listener: BestMoveListener): void {\n    const index = this.bestMoveListeners.indexOf(listener);\n    if (index !== -1) {\n      this.bestMoveListeners.splice(index, 1);\n    }\n  }\n  \n  /**\n   * Helper method to set position and start analysis.\n   * @param position Position in HUB format (WB notation).\n   * @param options Analysis options.\n   */\n  async analyzePosition(position: string, options: AnalysisOptions = {}): Promise<void> {\n    const { \n      depth = 20, \n      movetime, \n      nodes,\n      infinite = false\n    } = options;\n    \n    await this.sendCommand('hub');\n    await this.sendCommand('init');\n    await this.sendCommand('new-game');\n    await this.sendCommand(`pos pos=${position}`);\n    \n    let levelCommand = '';\n    if (depth && !infinite) levelCommand += `level depth=${depth}`;\n    if (movetime) levelCommand += `level move-time=${movetime}`;\n    if (nodes) levelCommand += `level nodes=${nodes}`;\n    if (infinite) levelCommand += 'level infinite';\n    \n    if (levelCommand) await this.sendCommand(levelCommand);\n    await this.sendCommand('go analyze');\n  }\n  \n  /**\n   * Helper method to stop ongoing analysis.\n   */\n  async stopAnalysis(): Promise<void> {\n    await this.sendCommand('stop');\n  }\n  \n  /**\n   * Helper method to get computer move in a game.\n   * @param position Position in HUB format.\n   * @param movetime Time in milliseconds for the move (default 1000ms).\n   * @param depth Analysis depth (default 15).\n   */\n  async getComputerMove(position: string, movetime: number = 1000, depth: number = 15): Promise<void> {\n    await this.sendCommand('hub');\n    await this.sendCommand('init');\n    await this.sendCommand(`pos pos=${position}`);\n    await this.sendCommand(`level move-time=${movetime / 1000}`);\n    await this.sendCommand(`level depth=${depth}`);\n    await this.sendCommand('go think');\n  }\n  \n  /**\n   * Cleans up resources when done with the library.\n   */\n  destroy(): void {\n    // Clear any pending throttle timers\n    if (this.messageThrottleTimer) {\n      clearTimeout(this.messageThrottleTimer);\n      this.messageThrottleTimer = null;\n    }\n    \n    if (this.analysisThrottleTimer) {\n      clearTimeout(this.analysisThrottleTimer);\n      this.analysisThrottleTimer = null;\n    }\n    \n    this.shutdown().catch(console.error);\n    this.outputSubscription.remove();\n    this.analysisSubscription.remove();\n    this.listeners = [];\n    this.analysisListeners = [];\n    this.bestMoveListeners = [];\n  }\n}\n\n// Export a single instance, but allow custom configuration\nexport default new Scan();\n\n// Also export the class for users who want to create custom instances\nexport { Scan };"],"mappings":"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","ignoreList":[]}